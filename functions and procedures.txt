-- Package Declaration
CREATE OR REPLACE PACKAGE value_insert AS
  PROCEDURE patient_insert (
    id INT,
    name VARCHAR,
    meld_score REAL,
    alcoholism_degree INT,
    dob DATE,
    hospital_id INT
  );

  PROCEDURE hospital_insert (
    h_id INT,
    name VARCHAR,
    lat REAL,
    lon REAL,
    doc_avail INT,
    beds_avail INT
  );

  PROCEDURE liver_insert (
    liv_id INT,
    hos_id INT,
    age INT,
    dis REAL
  );
END value_insert;
/

-- Package Body
CREATE OR REPLACE PACKAGE BODY value_insert AS
  PROCEDURE patient_insert (
    id INT,
    name VARCHAR,
    meld_score REAL,
    alcoholism_degree INT,
    dob DATE,
    hospital_id INT
  ) IS
  BEGIN
    INSERT INTO patients(patient_id, name, meld_score, alcoholism_degree, dob, hospital_id)
    VALUES (id, name, meld_score, alcoholism_degree, dob, hospital_id);
  END;

  PROCEDURE hospital_insert (
    h_id INT,
    name VARCHAR,
    lat REAL,
    lon REAL,
    doc_avail INT,
    beds_avail INT
  ) IS
  BEGIN
    INSERT INTO hospitals(hospital_id, name, latitude, longitude, doctors_available, beds_available)
    VALUES (h_id, name, lat, lon, doc_avail, beds_avail);
  END;

  PROCEDURE liver_insert (
    liv_id INT,
    hos_id INT,
    age INT,
    dis REAL
  ) IS
  BEGIN
    INSERT INTO liver(liver_id, hospital_id, liver_age, life_distance)
    VALUES (liv_id, hos_id, age, dis);
  END;
END value_insert;
/

-- Function to Check if Liver Can Be Transported
CREATE OR REPLACE FUNCTION liver_transport_check (
  liv_id INT,
  hos_id INT
) RETURN INT AS
  liv_hos hospitals%ROWTYPE;
  liv liver%ROWTYPE;
  hos hospitals%ROWTYPE;
  x REAL;
  y REAL;
  d REAL;
BEGIN
  SELECT * INTO liv FROM liver WHERE liver_id = liv_id;
  SELECT * INTO liv_hos FROM hospitals WHERE hospital_id = liv.hospital_id;
  SELECT * INTO hos FROM hospitals WHERE hospital_id = hos_id;

  x := hos.latitude - liv_hos.latitude;
  y := hos.longitude - liv_hos.longitude;
  d := SQRT(x * x + y * y);

  IF d <= liv.life_distance THEN
    RETURN 1;
  ELSE
    RETURN 0;
  END IF;
END;
/

-- Table to Store Hospital Beds and Doctors
CREATE TABLE store_beds_docs (
  hospital_id INT,
  beds INT,
  docs INT,
  FOREIGN KEY (hospital_id) REFERENCES hospitals(hospital_id)
);

-- Trigger to Track Initial Bed and Doctor Counts
CREATE OR REPLACE TRIGGER track
AFTER INSERT ON hospitals
FOR EACH ROW
BEGIN
  INSERT INTO store_beds_docs VALUES (
    :NEW.hospital_id,
    :NEW.beds_available,
    :NEW.doctors_available
  );
END;
/

-- Procedure to Update Hospital Availability from Backup Table
CREATE OR REPLACE PROCEDURE update_hospitals(hos_id INT) AS
  bed INT;
  doc INT;
BEGIN
  SELECT beds, docs INTO bed, doc
  FROM store_beds_docs
  WHERE hospital_id = hos_id;

  UPDATE hospitals
  SET beds_available = bed,
      doctors_available = doc
  WHERE hospital_id = hos_id;
END;
/

-- Procedure for Liver Transplant Matching
CREATE OR REPLACE PROCEDURE liver_transplant AS
  CURSOR liver_cur IS
    SELECT liver_id, liver_age FROM liver ORDER BY life_distance ASC;

  CURSOR patient_cur IS
    SELECT patient_id, dob, hospital_id FROM patients
    ORDER BY meld_score DESC, alcoholism_degree ASC;

  CURSOR hos_cur IS
    SELECT hospital_id FROM hospitals;

  flag INT;
BEGIN
  FOR r IN liver_cur LOOP
    flag := 1;
    FOR x IN patient_cur LOOP
      IF (MONTHS_BETWEEN(SYSDATE, x.dob) / 12) >= r.liver_age THEN
        IF liver_transport_check(r.liver_id, x.hospital_id) = 1 THEN
          flag := 0;
          DELETE FROM patients WHERE patient_id = x.patient_id;
          DELETE FROM liver WHERE liver_id = r.liver_id;
          EXIT;
        END IF;
      END IF;
    END LOOP;

    IF flag = 1 THEN
      DBMS_OUTPUT.PUT_LINE('No patient matched for liver ID ' || r.liver_id);
    END IF;
  END LOOP;

  FOR r IN hos_cur LOOP
    update_hospitals(r.hospital_id);
  END LOOP;
END;
/

-- Trigger to Decrement Doctors and Beds After a Match
CREATE OR REPLACE TRIGGER matched_and_update
AFTER DELETE ON patients
FOR EACH ROW
BEGIN
  UPDATE hospitals
  SET doctors_available = GREATEST(doctors_available - 1, 0),
      beds_available = GREATEST(beds_available - 1, 0)
  WHERE hospital_id = :OLD.hospital_id;
END;
/
